Class 1 - object literals
  object literals can be retrieved in two ways -
  myObject.keyName, myObject["keyName"]

  # methods - simply assign a function to one of the keys.
  myObject = {run: function(){
    console.log("run");
  }}

Class 2 - Constructors
  # Constructor functions are functions that help create new objects, they are usually capitalized and their syntax is as follows -
  function Person(name, age) {
    this.name = name;
    this.age = age
  };

  # they are assigned like this -
    me = new Person("noam", 25);

  # The "new" keyword allows js to understand "this" refers to the new object

Class 3 - prototyping
  # A class's properties and methods are usually reinstantiated for every new object created. This means it takes a lot of memory and disk space. For a method to only be created once you can define the mehod as a prototype of the class, meaning the method will apply to every instance of the class(although it can be overwritten)

  MyConstructor.prototype.add = function(a,b) {return a+b};

Class 4 - Inheritance
  # Objects can inherit properties and methods from other object, just like classes in python. To do so, you have to call the "father" object on the new child object as follows -
  function Father(name,age) {
    this.name = name;
    this.age = age;
  };
  Father.prototype.shout = function() {return "aaaa"};

  dad = new Father("oren",54);

  function Child(weight, name, age) {
    Father.call(this, name, age); //->this refers to the new Child object and will be "this" too in the Father call
    this.weight = weight;
  }
  Child.prototype = Object.create(Father.prototype);

Class 5 - The module pattern
  # JS files clutter the browser environment, to solve this, you can run your entire code inside an anonymous function. That way they are local variables and erased the second the function stops running.
  !function(){ //the "!" forces the function to assess itself and therefore run, without it there is just a declaration followed by () which is a syntax error
    #myCodeGoesHere
  }(); // Runs the wrapping function

  # _ (underscore) is a library that you can import using a CDN, which handled some common functions like looping, filtering and templating.
