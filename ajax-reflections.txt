Class 1 - Introduction
  AJAX stands for asynchronous JS and XML, it is used to send real-time info from the browser to the server and back and update the page using this data without being referred to a new URL.
  There are 4 steps to an AJAX request -
  1. Create request object
  2. Define callback function
  3. Open request
  4. Send request

Class 2 - Send basic AJAX request
  # create new request object before every request with -
  var xhr = new XMLHttpRequest();
  # define callback when the xhr object changes -
  xhr.onreadystatechange = function() {
      if (xhr.readyState === 4) {{
        document.getElementById("ajax").innerHTML = xhr.response;
      }
    };
  # open the request using desired method -and the url it will be sent to
  xhr.open("GET", "sidebar.html");
  # Send request -
      xhr.send();


Class 3 - Get vs. Post
  Use the get method when you want to retrieve information from the website and post when you want to update data on the webserver.

  The get method is used by the browser when we type in a url, it just asks the html file using the url location.
  All of GET's information is stored inside the URL. This is limited in 2 ways - Some browsers have a limitation on the nu. of chars in a URL and more importantly, the URL is saved in history and should therefore not contain sensitive information.

  The POST instead sends a request separate from the URL. This can handle a lot more information but is also more complicated.


Class 4 - Security limitations
  # An AJAX request can only be made to the same server.
  Additionaly, it has to be made to the same port, protocol(http or https) and exact URL (db.mysite != www.mysite)

Class 5 - xhr readyState and status
  # the readyState property of the xhr object keeps track of the stages of theajax request. readyState === 4 -> the answer has arrived back to the browser.
  # the status property return 200 if the request went smoothly and an error otherwise. 404 for file not found, 500 for internal error and more.

Class 6 - JSON
  # Json properties and values have to be surrounded by double-quotes
  # parse JSON in js using the JSON.parse(json-string) command which is available in all web browsers
  # once the JSON is parsed and assigned to a variable, you can treat it like any other varaible object

Class 7 - jQuery and AJAX
  # jQuery contains method to make AJAX request a lot easier by skipping many of the required steps. To get HTML content from the server simply use ->
  $("containingElement").load("url.html");

  # jQuery contains other shorthand methods available to view in the jQuery api under AJAX. For Example this is the get method
  $.get(url, data, callback) -> the data can be either a query string or a js object that will be parsed to q query string. The callback is the callback function and receives the ajax response as its argument.
  For example -
  callback function(response) {$("#div").html(response)};

  *$.get() ->is shorthand for jQuery.get()
  **Useful jQuery functions ->
    $("div").html("myHtml")
    $.each(array, function(index, value){})
    $.getJSON(url,data,callback)

Class 8 - AJAX post
  # $.post(url, data, callback) -> is basically the same as $get()
  # However, jQuery has more methods to allow easier form submitting.
  $(form).submit( function(event) {
    event.preventDefault() //->prevents the default redirection
    var url = $(this).attr("action") //-> gets the urls from the action
    var data = $(this).serialize() //-> retrieves and parses all the form data
  });

Class 9 - $.ajax() method
  # all the other shorthands are built on this function.
  $.ajax(url, settings) -> the settings is the interesting part and allows more flexibility.
  i.e -> have a timer for response and action if it isn't returned in time.

Class 10 - Errors.
  # Normally ajax jquery methods fail silently. However, if you want to catch the error, simply concatenate the .fail() method to you ajax request like this
  $.get("asd.html", callback).fail(function(jqXHR){ //-> return as jquery XHR object
  console.log("jqXHR.status")
  })
  * the method does not work on $.load \ $.getJSON()
