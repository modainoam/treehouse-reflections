Class 1 - Getting Started
  #git init - initialize empty repo
    *optionally 'git init folder_name' -> creates folder

  the ".git" folder is hidden, but it contains all of the repo data all the history and commits and everything is there

Class 2 - committing files
  # git add myfile.txt -> add file to staging
  # git commit -> opens commit dialogue and commits
  # git commit -a -m "fix bug" -> -a = add all changed files(no need for add). -m = commit message. -a only adds currently tracked files

Class 3 - Staging Area
  The staging area includes all the files that were added but not commited.
  # git status -> shows current branch and commit status

Class 4 - Looking Back
  # git log -> lets you look at all you past commits.
  # git checkout commit_id -> lets you use an old version.
    * 4-5 first digits of id should suffice
    * to go back to normal, use checkout master
    * HEAD~1 -> stands for the previous commited version(not the last one)

Class 5 - Branches
  # git branch branch_name -> creates a new branch(does not checkout said branch)
  # git checkout branch_name -> checkout branch
  # git checkout -b branch_new -> checkouts and creates a new branch if it doesn't exist
  * When yoiu create a new branch, it splits from your current position in your current branch, meaning if I am in branch_1 and I create a new branch_2, branch_2 will have all the commits of branch_1 and therefore may not be up to date with "master"
  # git branch -> lists all existing branches and shows current branch
  # git branch -D useless_branch -> deletes branch

Class 6 - Merging
  # git merges separate branches automatically if it can and adds all the merged branch commits to the master log on the same timeline. When a file has been edited by 2 different branches, an extra "merging" commit will be added to the time the merging was done.
  # git merge branch2
  # conflicts - when changes have been made to the same line, the merge cannot resolve and when attempting to merge git will issue an error and let the user know what the conflicting files are. In the conflicting file the conflicting part will be denoted as follows -
  <<<<<<<<<<<<<<<<HEAD
  line master
  =============
  line brnach2
  >>>>>>>>>>>>>branch2

Class 7 - Working with remote directories
  # Remote directories can be used to sync between different people's work.
  # git clone url -> get a copy of a shared repository
  # git remote -> list your remote repositories
  # git remote add remote_name remote_url
  # the origin remote is the default remote name given to the original location of a cloned repository
  # git push remote_name [branch_name] -> push to the specified remote all changes or changes made in a specific branch
  # git pull origin -> pull the changes made in origin
  When trying to push to a repo,you first have to be up to date with this repository. Meaning you have to pull the changes, merge them in your local branch and only then you can push your changes freely.
